#!/usr/bin/env python3

import sys
import os
import glob
import logging
import random
import string
import shutil
import subprocess
import numpy as np
import time
import logging
from tqdm import tqdm

sewage_dir = os.path.dirname(os.path.realpath(__file__))
modules_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), "modules")
sys.path.append(modules_dir)
# internal functions
from main_argsparse import main_sewage_menu
from amplicons_functions import generate_amplicons
from amplicons_functions_class import GenerateAmplicon_MainWorkflow
from enrichment_workflow import EnrichmentWorkflow
from log_functions import logFile, logFile_initials
from detailed_message import details
from fasta_funcitons import globFastAfiles, listOfFastaPathways
from proportion_functions import equalProportions, randomProportions
from art_functions import check_art_illumina_command, artIlluminaSubprocess
from write_functions import countdown, writeProportionFile, parentDir_pathway, concatenateFastQfiles

def main():

    args = main_sewage_menu()

    if args.subcommand == "amplicon":
        sewage_home_dir = os.path.dirname(os.path.realpath(__file__))
        GenerateAmplicon_MainWorkflow(args.fasta, args.scheme, args.user, sewage_home_dir, args.output, args.pathway)

    elif args.subcommand == "enrich":
        EnrichmentWorkflow(
            args=args,
            fasta_in=args.fasta,
            dir_name=args.out,
            out_pathway=args.out_pathway,
            proportion=args.proportion,
            dVOC=args.dVOC,
            rndSeed=args.rndSeed,
            pfold= args.pfold,
            ss=args.ss,
            l=args.l,
            m=args.m,
            s=args.s,
            ir=args.ir,
            ir2=args.ir2,
            dr=args.dr,
            dr2=args.dr2,
            rdmSd_art=args.rndSeed_art_illumina,
            maxIndel=args.maxIndel,
            nf=args.nf,
            qL=args.qL,
            qU=args.qU,
            qs=args.qs,
            qs2=args.qs2,
        )
    elif args.subcommand == "details":
        details()

if __name__ == "__main__":
    main()