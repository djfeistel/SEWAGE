#!/usr/bin/env python3

import sys
import os
import glob
import logging
import random
import string
import shutil
import subprocess
import numpy as np
import time
from tqdm import tqdm
sys.path.append('modules')
from argsparse_opts import opts
from detailed_message import details

def logFile(parent_dir):
    dir_name = os.path.basename(parent_dir)
    log_filename = os.path.join(parent_dir, f"{dir_name}_logfile.log")
    logging.basicConfig(
        filename=log_filename,
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )
    return

def logFile_initials(args, fasta_in:str, fasta_type:str, parent_dir:str, fasta_pathway_list:list):
    args_dict = vars(args)
    args_list = list(args_dict.items())
    args_list = [(str(i), str(j)) for i, j in args_list]
    logging.info("SEWAGE initiated")
    logging.info("Parameters used in SEWAGE:")
    for item in args_list:
        logging.info(f"{item[0]}\t{item[1]}")
    logging.info("Additional information")
    logging.info(f"\nFastA files found in {fasta_in}")
    logging.info(f"FastA input type: {fasta_type}")
    logging.info(f"Total FASTA files detected: {len(fasta_pathway_list)}")
    logging.info(f"Output storage: {parent_dir}")
    return

def countdown():
    print(f"\nSimulating Sewage reads starts in...\n")
    for i in range(3, 0, -1):
        print(f"{i} seconds\n")
        time.sleep(1)
    print(f"Blast off!\n")
    return

def globFastAfiles(pathway)->list:
    '''glob fasta files in pathway, directory must only harbor fasta files'''
    pathway = os.path.realpath(pathway)
    file_pathway_list = glob.glob(pathway + "/*")
    valid_extensions = ('.fasta', '.fa', '.fsa')
    fasta_pathway_list = [file for file in file_pathway_list if os.path.splitext(file)[1].lower() in valid_extensions]
    if len(fasta_pathway_list) == 0:
        print(f"\nThere are not fasta files located in\n\t{pathway}\n", file=sys.stderr)
        print(f"Check to make sure that your fasta files end with .fasta, .fa, or .fsa", file=sys.stderr)
        sys.exit(0)
    #print(f"Total FASTA files detected in pathway are: {len(fasta_pathway_list)}", file=sys.stderr)
    return fasta_pathway_list

def equalProportions(fasta_pathway_list:list)->list:
    equal_proportions = [1/len(fasta_pathway_list)] * len(fasta_pathway_list)
    fasta_proportions = zip(fasta_pathway_list, equal_proportions)
    print(f"Equal proportion is ~{round(1/len(fasta_pathway_list), 3)} for each FASTA file and is summed to {sum(equal_proportions)}")
    return list(fasta_proportions)

def randomProportions(fasta_pathway_list:list, random_seed:int=13)->list:
    '''return a list of float values that sum to 1 which are use as proportions'''
    num_proportions = len(fasta_pathway_list)
    np.random.seed(random_seed)
    random_proportions = np.random.rand(num_proportions)
    # Normalize the proportions to sum up to 1
    normalized_proportions =  random_proportions / np.sum(random_proportions)
    fasta_proportions = zip(fasta_pathway_list, normalized_proportions)
    #print(f"Proportion summed to {np.sum(normalized_proportions)}", file=sys.stderr)
    return list(fasta_proportions)

def listOfFastaPathways(fasta_in):
    with open(fasta_in, 'r') as fh:
        #pathways_list = [line.strip().rsplit() for line in file]
        pathways_list = fh.read().splitlines()
    return pathways_list

def writeProportionFile(fasta_pathway_list:str, parent_dir:str)->None:
    with open(os.path.join(parent_dir, 'proportions_list.txt'), 'w') as wf:
        for file, prop in fasta_pathway_list:
            wf.write(f"{file}\t{prop}\n")

def parentDir_pathway(dir_pathway:str, dir_name:str=None):
    if dir_name is None:
        '''create random string for directory is dir_name is None'''
        characters = string.ascii_letters + string.digits
        random_string = ''.join(random.choices(characters, k=10))
        dir_name = "SEWAGE_" + random_string
    else:
        dir_name = "SEWAGE_" + dir_name
    pathway = os.path.realpath(os.path.join(dir_pathway, dir_name))
    return pathway

def check_art_illumina_command():
    try:
        subprocess.run(["art_illumina"], 
                       check=True, 
                       stdout=subprocess.DEVNULL, 
                       stderr=subprocess.DEVNULL)
    except FileNotFoundError:
        return [False, FileNotFoundError]
    except subprocess.CalledProcessError:
        return [True, subprocess.CalledProcessError]


def artIlluminaSubprocess(fastaFile:str,
                          log_dir:string,
                          proportion:float,
                          pfold:int=1000,
                          ss:str='HS25',
                          l:int=150,
                          m:int=200,
                          s:int=1,
                          ir:int=0,
                          ir2:int=0,
                          dr:int=0,
                          dr2:int=0,
                          rndSeed:int=13,
                          maxIndel:int=0,
                          nf:int=0):
    '''simulate reads'''
    file_name = os.path.basename(fastaFile) #removed pathway for as fasta file only
    id = file_name[:file_name.rfind('.')] # remove extention to add to reads defline
    fcov = float(proportion)*pfold

    command = [
        "art_illumina",
        "-ss", ss,
        "-i", fastaFile,
        "--paired",
        "-l", str(l),
        "-f", str(fcov),
        "-m", str(m),
        "-s", str(s),
        "-o", f"{id}_",
        "-d", f"FASTAid_{id}_proportion_{round(proportion, 3)}_",
        "-ir", str(ir),
        "-ir2", str(ir2),
        "-dr", str(dr),
        "-dr2", str(dr2),
        "-rs", str(rndSeed),
        "-k", str(maxIndel),
        "-na",
        "-nf", str(nf)
    ]

    stderr_file = f"{id}_log.txt"
    log_pathway = os.path.join(log_dir, stderr_file)
    with open(log_pathway, 'w') as stderr_output:
        process = subprocess.Popen(' '.join(command), shell=True, stdout=stderr_output, stderr=stderr_output)
        process.wait()
    return

def concatenateFastQfiles(rawreads_dir, parent_dir, output_name):
    '''Concatenate fastq files into a single file'''
    forward_reads = glob.glob(rawreads_dir + '/*_1.fq')
    reverse_reads = glob.glob(rawreads_dir + '/*_2.fq')

    def writeProportionFastQ(parent_dir, output_name, list_of_fastq_files, extention):
        output_file = output_name + extention
        pathway = os.path.join(parent_dir, output_file)
        with open(pathway, 'wb') as wf:
            for fastq_file in list_of_fastq_files:
                with open(fastq_file, 'rb') as rf:
                    shutil.copyfileobj(rf, wf)
        return
    
    writeProportionFastQ(parent_dir, output_name, forward_reads, "_1.fastq")
    writeProportionFastQ(parent_dir, output_name, reverse_reads, "_2.fastq")

    return

def main():

    args = opts()

    '''print full descriptive message'''
    if args.details or len(sys.argv) == 1:
        details()
        sys.exit(0)

    '''check if art_illumina is in pathway before starting any work'''
    if not check_art_illumina_command()[0]:
        print(f"\n'art_illumina' was not found in your pathway {check_art_illumina_command()[1]}\n", file=sys.stderr)
        sys.exit(1)
    
    fasta_in = args.fasta #pathway or file
    dir_name = args.out #Default None but still passed
    out_pathway = os.path.realpath(args.out_pathway)

    '''check if fasta_in is a pathway or file exists or None'''
    
    fasta_pathway_list = None
    fasta_type = None
    if fasta_in is None:
        print(f"\nPlease specify a pathway or file name for the -i flag\n", file=sys.stderr)
        sys.exit(0)
    elif os.path.isdir(fasta_in):
        fasta_pathway_list = globFastAfiles(fasta_in)
        fasta_type = "PATHWAY"
    elif os.path.isfile(fasta_in):
        fasta_pathway_list = listOfFastaPathways(fasta_in)
        fasta_type = "FILE"
    else:
        print(f"\n{fasta_in} is neither a file nor a pathway.\n", file=sys.stderr)
        sys.exit(1)

    '''check if out_pathway and dir_name exits'''
    if not os.path.isdir(out_pathway):
        print(f"\n{out_pathway} is not a valid pathway\n", file=sys.stderr)
        sys.exit(1)

    '''make storage dir'''
    parent_dir = parentDir_pathway(dir_pathway=out_pathway, 
                                   dir_name=dir_name)
    try:
        os.mkdir(parent_dir)
        rawreads_dir = os.path.join(parent_dir, "00.RAWREADS")
        logs_dir = os.path.join(parent_dir, "99.LOGS") #logs for art commands
        os.mkdir(rawreads_dir)
        os.mkdir(logs_dir)
    except FileExistsError:
        print(f"\nDirectory '{os.path.basename(parent_dir)}' already exists in pathway. Choose a different name.\n", file=sys.stderr)
        sys.exit(0)
    except OSError as e:
        print(f"Failed to create directory: {e}")
        sys.exit(0)

    '''
    if you have made it this far, there is no turning back...
    your journy starts now...
    '''
    '''logging starts here'''
    logFile(parent_dir=parent_dir) #initiat logging file
    logFile_initials(args=args, 
                     fasta_in=fasta_in, 
                     fasta_type=fasta_type, 
                     parent_dir=parent_dir,
                     fasta_pathway_list=fasta_pathway_list)
    
    '''which proportion do you want?'''

    if args.proportion == 'e':
        fasta_proportions_list = equalProportions(fasta_pathway_list=fasta_pathway_list)
    else:
        rdmSd = args.rndSeed
        fasta_proportions_list = randomProportions(fasta_pathway_list=fasta_pathway_list,
                                                   random_seed=rdmSd)

    '''change to rawreads directory to add reads there'''
    try:
        os.chdir(rawreads_dir)
        #print(f"Data will be saved in: {os.getcwd()}\n", file=sys.stderr)
        logging.info(f"Data saved in: {rawreads_dir}")
        logging.info(f"Simulated information saved in: {logs_dir}")
    except Exception as e:
        print(f"Error occurred while changing to the directory: {e}")

    '''just for fun :)'''
    countdown()

    for item in tqdm(fasta_proportions_list, desc="Processing", unit="tuple", dynamic_ncols=False):
    #for fasta_file, fasta_proportion in fasta_proportions_list:
        fasta_file, fasta_proportion = item
        logging.info(f"Simulation reads for {fasta_file}")
        logging.info(f"Proporiton is set at {fasta_proportion}")
        artIlluminaSubprocess(fastaFile=fasta_file,
                              log_dir=logs_dir,
                              proportion=fasta_proportion,
                              pfold=args.pfold,
                              ss=args.ss,
                              l=args.l,
                              m=args.m,
                              s=args.s,
                              ir=args.ir,
                              ir2=args.ir2,
                              dr=args.dr,
                              dr2=args.dr2,
                              rndSeed=args.rndSeed_art_illumina,
                              maxIndel=args.maxIndel,
                              nf=args.nf) 
    
    '''concatinate fastq files into one file with basename of parent_dir as name'''
    concatenateFastQfiles(parent_dir=parent_dir, 
                          rawreads_dir=rawreads_dir, 
                          output_name=os.path.basename(parent_dir))
    '''write a file with the pathways and proporitons'''
    writeProportionFile(fasta_pathway_list=fasta_proportions_list, 
                        parent_dir=parent_dir)

    print(f"\nFinished creating 'Sewage' samples :)\n", file=sys.stderr)
    logging.info(f"Finished creating 'Sewage' samples :)")

    return 


if __name__ == "__main__":
    main()